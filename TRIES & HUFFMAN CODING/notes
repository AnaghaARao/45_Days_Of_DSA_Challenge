- Advantage of utilizing a trie data structure instead of a hashmap:
    1. tries exhibit higher memory efficiency compared to hashmap
    2. tries demonstrate efficiency in prefix search operations

- in the trie data structure, every node can have a max of 26 addreses/ child node
- the address should also be of the type of trieClass

Types of Tries:

1. Compressed Tries:
- grouping of characters that are common to multiple words into a single node
- grouping of characters that dont have any branching
- they are majorly used for space optimization
![about compressed tries](image.png)

2. Suffix Tries:
- majorly used for pattern matching
- a normal trie allows only prefix pattern matching
- in suffix pattern matching, the suffixes of the word is also inserted into the suffix tries

For pattern matching, we remove the attribute, isTerminal in TrieNode due to its irrelevance

Huffman Coding implementation:
- need to keep track of frequency of each character in the input
- maintain a min priority queue to get the min frequency characters
- the structure tooks like a binary tree - so implement a binary tree determine the code
- to find code of each character:
    1. maintain 2 hashmaps:
    - one for compression(<char, code>)
    - one for decompression(<code, char>)
    2. find code of all characters by traversing the entire tree
    3. on going left append '0' to the code
    4. on going right append '1' to the code